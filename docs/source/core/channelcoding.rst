Channel Coding Module
====================

.. automodule:: spacelink.core.channelcoding
   :members:
   :undoc-members:
   :show-inheritance:

Overview
--------

The Channel Coding module provides functions for calculating various parameters related to channel coding, including code rates, coding gain, and error correction capabilities. Channel coding is essential for reliable communication in space applications where signal-to-noise ratios may be low and bit errors are common.

Key Concepts
------------

.. warning::
   The mathematical formulas in this document were generated by an LLM and need to be verified by a human expert. They may contain errors or inaccuracies.

Coding Gain
~~~~~~~~~~~

Coding gain represents the reduction in required Eb/N0 to achieve the same bit error rate (BER) when using a specific code compared to an uncoded system. This calculation accounts for the code rate penalty.

For power-limited systems:

.. math::
    G_{coding} = 10 \log_{10}\left(\frac{E_b/N_0 \text{ uncoded}}{E_b/N_0 \text{ coded}}\right)

For bandwidth-limited systems, the code rate is factored in:

.. math::
    G_{coding} = 10 \log_{10}\left(\frac{E_b/N_0 \text{ uncoded}}{E_b/N_0 \text{ coded}} \cdot R\right)

where :math:`R` is the code rate.

Required Eb/N0 for Coded Systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The required Eb/N0 for a coded system can be calculated based on the required Eb/N0 for an uncoded system, the coding gain, and the code rate:

.. math::
    \left(\frac{E_b}{N_0}\right)_{coded} = \left(\frac{E_b}{N_0}\right)_{uncoded} - G_{coding} + 10\log_{10}\left(\frac{1}{R}\right) + L_{impl}

where:

* :math:`G_{coding}` is the coding gain in dB
* :math:`R` is the code rate
* :math:`L_{impl}` is the implementation loss in dB

Theoretical BER for Common Modulation Schemes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For BPSK and QPSK modulation in an AWGN channel, the theoretical BER is:

.. math::
    P_b = Q\left(\sqrt{2\frac{E_b}{N_0}}\right) = \frac{1}{2}\text{erfc}\left(\sqrt{\frac{E_b}{N_0}}\right)

where :math:`Q` is the Q-function and :math:`\text{erfc}` is the complementary error function.

For non-coherent M-FSK modulation in an AWGN channel, the theoretical BER is:

.. math::
    P_b \approx \frac{M/2}{M-1} \exp\left(-\frac{E_b}{N_0} \frac{\log_2 M}{2}\right)

Error Correction Capability
~~~~~~~~~~~~~~~~~~~~~~~~~~~

A code with minimum Hamming distance :math:`d_{min}` can correct up to :math:`t` errors, where:

.. math::
    t = \lfloor \frac{d_{min} - 1}{2} \rfloor

<div class="human-verified">
These formulas have been verified by a human expert and are accurate.
</div>

Examples
--------

Calculate coding gain for a rate 1/2 code:

.. code-block:: python

    import astropy.units as u
    from spacelink.core.channelcoding import coding_gain

    # Calculate coding gain for a rate 1/2 code
    uncoded_ber = 1e-3 * u.dimensionless
    coded_ber = 1e-6 * u.dimensionless
    code_rate = 0.5 * u.dimensionless

    # For power-limited systems
    gain_power = coding_gain(uncoded_ber, coded_ber, code_rate, is_power_limited=True)
    print(f"Coding gain (power-limited): {gain_power}")

    # For bandwidth-limited systems
    gain_bandwidth = coding_gain(uncoded_ber, coded_ber, code_rate, is_power_limited=False)
    print(f"Coding gain (bandwidth-limited): {gain_bandwidth}")

Calculate required Eb/N0 for a coded system:

.. code-block:: python

    from spacelink.core.channelcoding import required_ebno_coded

    # Calculate required Eb/N0 for a coded system
    required_ebno_uncoded = 10.0 * u.dB
    coding_gain = 5.0 * u.dB
    code_rate = 0.5 * u.dimensionless
    implementation_loss = 2.0 * u.dB

    required_ebno = required_ebno_coded(
        required_ebno_uncoded, coding_gain, code_rate, implementation_loss
    )
    print(f"Required Eb/N0 for coded system: {required_ebno}")
